{"version":3,"file":"main.6294501d302255885fa4.hot-update.js","sources":["webpack:///./src/server/previews.js"],"sourcesContent":["export default {\n  basic: {\n    \"interaction-pan-node\": {\n      title: \"交互-拖拽节点\",\n      code: `<script type=\"text/babel\">\n  const { Graph } = window['g6-for-react'];\n  const width = window.innerWidth;\n  const height = window.innerHeight;\n\n  class Demo extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        data: {\n          nodes: [{\n            id: 'node1',\n            x: 100,\n            y: 200\n          }, {\n            id: 'node2',\n            x: 300,\n            y: 200\n          }],\n          edges: [{\n            id: 'edge1',\n            target: 'node2',\n            source: 'node1'\n          }]\n        }\n      };\n    }\n  \n    onNodeDragstart = ev => {\n      const item = ev.item;\n      const model = item.getModel();\n      this.node = item;\n      this.dx = model.x - ev.x;\n      this.dy = model.y - ev.y;\n    };\n  \n    onNodeDrag = ev => {\n      this.node && this.graph.update(this.node, {\n        x: ev.x + this.dx,\n        y: ev.y + this.dy\n      });\n    };\n  \n    onNodeDragend = () => {\n      this.node = undefined;\n    };\n  \n    render() {\n      return (\n        <div className=\"graph\">\n          <div className=\"graph-basic\">\n            <Graph \n              width={width} \n              height={height} \n              data={this.state.data} \n              onGetG6Instance={graph => this.graph = graph}\n              onNodeDragstart={this.onNodeDragstart}\n              onNodeDrag={this.onNodeDrag}\n              onNodeDragend={this.onNodeDragend}\n            />\n          </div>\n        </div>\n      );\n    }\n  }\n  ReactDOM.render(<Demo />, document.getElementById('mountNode'));\n</script>`\n    },\n    \"interaction-behaviour-mode\": {\n      title: \"交互-模式与行为\",\n      code: `<script type=\"text/babel\">\n  const { Graph, G6, NodeMapper, EdgeMapper } = window['g6-for-react'];\n  // 注册鼠标进入节点变红的行为\n  G6.registerBehaviour('mouseEnterFillRed', function(graph) {\n    graph.behaviourOn('node:mouseenter', function(ev) {\n      graph.update(ev.item, {\n        color: 'red'\n      });\n    });\n  });\n\n  // 注册鼠标进入节点变绿的行为\n  G6.registerBehaviour('mouseEnterFillGreen', function(graph) {\n    graph.behaviourOn('node:mouseenter', function(ev) {\n      graph.update(ev.item, {\n        color: 'green'\n      });\n    });\n  });\n\n  // 注册鼠标移出节点变原色的行为\n  G6.registerBehaviour('mouseLeaveResetFill', function(graph) {\n    graph.behaviourOn('node:mouseleave', function(ev) {\n      graph.update(ev.item, {\n        color: '#1890FF'\n      });\n    });\n  });\n  class Demo extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        data: {\n          nodes: [{\n            id: '事件',\n            x: 80,\n            y: 150\n          }, {\n            id: '行为',\n            x: 200,\n            y: 150\n          }, {\n            id: '模式',\n            x: 320,\n            y: 150\n          }],\n          edges: [{\n            source: '事件',\n            target: '行为',\n            label: '组成'\n          }, {\n            source: '行为',\n            target: '模式',\n            label: '组成'\n          }]\n        },\n        mode: 'red'\n      };\n    }\n  \n    render() {\n      return (\n        <div className=\"graph\">\n          <div className=\"graph-basic\">\n            <div><button onClick={() => {\n              if (this.state.mode === 'red') {\n                this.setState({ mode: 'green' });\n              } else {\n                this.setState({ mode: 'red' });\n              }\n            }}>切换模式</button></div>\n            <Graph \n              fitView=\"cc\" \n              height={window.innerHeight} \n              data={this.state.data}\n              modes={{\n                red: ['mouseEnterFillRed', 'mouseLeaveResetFill'],\n                green: ['mouseEnterFillGreen', 'mouseLeaveResetFill']\n              }}\n              mode={this.state.mode}\n              onGetG6Instance={graph => this.graph = graph}\n            >\n              <NodeMapper label={model => model.id}/>\n              <EdgeMapper style={() => ({ endArrow: true })}/>\n            </Graph>\n          </div>\n        </div>\n      );\n    }\n  }\n  ReactDOM.render(<Demo />, document.getElementById('mountNode'));\n</script>`\n    },\n    \"custom-anchor\": {\n      title: \"自定义-锚点\",\n      code: `<script type=\"text/babel\">\n  const { Graph, G6, NodeMapper } = window['g6-for-react'];\n  // 设置右边中点为连接锚点\n  G6.registerNode('node2', {\n    anchor: [\n    // 右边中点\n    [1, 0.5]]\n  });\n\n  // 设置相交盒模型为矩形\n  G6.registerNode('node3', {\n    anchor: {\n      intersectBox: 'rect'\n    }\n  });\n  class Demo extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        data: {\n          nodes: [{\n            id: 'node1',\n            x: 250,\n            y: 250\n          }, {\n            id: 'node2',\n            x: 250,\n            y: 100\n          }, {\n            id: 'node3',\n            x: 50,\n            y: 400\n          }, {\n            id: 'node5',\n            x: 450,\n            y: 400\n          }],\n          edges: [{\n            id: 'edge1',\n            target: 'node2',\n            source: 'node1'\n          }, {\n            id: 'edge2',\n            target: 'node3',\n            source: 'node1'\n          }, {\n            id: 'edge4',\n            target: 'node5',\n            source: 'node1'\n          }]\n        }\n      };\n    }\n  \n    render() {\n      return (\n        <div className=\"graph\">\n          <div className=\"graph-basic\">\n            <Graph fitView=\"cc\" height={window.innerHeight} data={this.state.data}>\n              <NodeMapper label={model => model.id} shape={model => model.id}/>\n            </Graph>\n          </div>\n        </div>\n      );\n    }\n  }\n  ReactDOM.render(<Demo />, document.getElementById('mountNode'));\n</script>`\n    },\n    \"custom-draw\": {\n      title: \"自定义-绘制\",\n      code: `<script type=\"text/babel\">\n  const { Graph, G6 } = window['g6-for-react'];\n  G6.registerNode('customNode', {\n    draw: item => {\n      const group = item.getGraphicGroup();\n      group.addShape('text', {\n        attrs: {\n          x: 100,\n          y: 100,\n          fill: '#333',\n          text: '我是一个自定义节点，\\n有下面那个方形和我自己组成'\n        }\n      });\n      return group.addShape('rect', {\n        attrs: {\n          x: 100,\n          y: 100,\n          width: 100,\n          height: 100,\n          stroke: 'red'\n        }\n      });\n    }\n  });\n  class Demo extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        data: {\n          nodes: [{\n            \"shape\": \"customNode\",\n            \"id\": \"node1\"\n          }]\n        }\n      };\n    }\n  \n    render() {\n      return (\n        <div className=\"graph\">\n          <div className=\"graph-basic\">\n            <Graph fitView=\"cc\" height={window.innerHeight} data={this.state.data}></Graph>\n          </div>\n        </div>\n      );\n    }\n  }\n  ReactDOM.render(<Demo />, document.getElementById('mountNode'));\n</script>`\n    },\n    \"custom-enter-leave-animate\": {\n      title: \"自定义-出入场动画\",\n      code: `<script type=\"text/babel\">\n  const { Graph, G6 } = window['g6-for-react'];\n  G6.registerNode('customNode', {\n    // 自定义入场动画\n    enterAnimate: function enterAnimate(item) {\n      const group = item.getGraphicGroup();\n      const model = item.getModel();\n      const x = model.x;\n      const y = model.y;\n  \n      group.transform([['t', -x, -y], ['s', 0.01, 0.01], ['t', x, y]]);\n      !group.get('destroyed') && group.animate({\n        transform: [['t', -x, -y], ['s', 100, 100], ['t', x, y]]\n      }, 450, 'easeBackOut');\n    },\n  \n    // 自定义出场动画\n    leaveAnimate: function leaveAnimate(item) {\n      const group = item.getGraphicGroup();\n      const model = item.getModel();\n      const x = model.x;\n      const y = model.y;\n      group && !group.get('destroyed') && group.animate({\n        transform: [['t', -x, -y], ['s', 0.01, 0.01], ['t', x, y]]\n      }, 450, 'easeCircleOut', function() {\n        group.remove();\n      });\n    }\n  });\n  class Demo extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        data: {\n          nodes: [{\n            \"shape\": \"customNode\",\n            \"id\": \"node1\",\n            x: 100,\n            y: 100\n          }]\n        }\n      };\n    }\n  \n    render() {\n      return (\n        <div className=\"graph\">\n          <div className=\"graph-basic\">\n            <Graph fitView=\"cc\" height={window.innerHeight} animate data={this.state.data}/>\n          </div>\n        </div>\n      );\n    }\n  \n    componentDidMount() {\n      setTimeout(() => {\n        this.setState({ data: { nodes: [] } });\n      }, 800);\n    }\n  }\n  ReactDOM.render(<Demo />, document.getElementById('mountNode'));\n</script>`\n    },\n    \"custom-flowing-edge\": {\n      title: \"自定义-流动效果线条\",\n      code: `<script type=\"text/babel\">\n  const { Graph, G6, EdgeMapper } = window['g6-for-react'];\n  G6.registerEdge('flowingEdge', {\n    afterDraw: function afterDraw(item) {\n      var keyShape = item.getKeyShape();\n      keyShape.attr('lineDash', [10, 10]);\n      keyShape.attr('lineDashOffset', 0);\n      keyShape.animate({\n        lineDashOffset: -20,\n        repeat: true\n      }, 500);\n    }\n  });\n  class Demo extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        data: {\n          nodes: [{\n            id: 'node1',\n            x: 100,\n            y: 200\n          }, {\n            id: 'node2',\n            x: 300,\n            y: 200\n          }],\n          edges: [{\n            target: 'node2',\n            source: 'node1'\n          }]\n        },\n        flowingEdge: true\n      };\n    }\n  \n    render() {\n      return (\n        <div className=\"graph\">\n          <div className=\"graph-basic\">\n            <Graph fitView=\"cc\" height={window.innerHeight} data={this.state.data}>\n              { this.state.flowingEdge && <EdgeMapper shape=\"flowingEdge\"/> }\n            </Graph>\n          </div>\n        </div>\n      );\n    }\n  }\n  ReactDOM.render(<Demo />, document.getElementById('mountNode'));\n</script>`\n    },\n    \"custom-inherit\": {\n      title: \"自定义-继承\",\n      code: `<script type=\"text/babel\">\n  const { Graph, G6 } = window['g6-for-react'];\n  G6.registerNode('rect', {\n    draw: function draw(item) {\n      var group = item.getGraphicGroup();\n      this.drawText(item);\n      return group.addShape('rect', {\n        attrs: {\n          x: 100,\n          y: 100,\n          width: 100,\n          height: 100,\n          stroke: 'red'\n        }\n      });\n    },\n    drawText: function drawText(item) {\n      var group = item.getGraphicGroup();\n      var text = this.getText();\n      group.addShape('text', {\n        attrs: {\n          x: 100,\n          y: 100,\n          fill: '#333',\n          text: text\n        }\n      });\n    },\n    getText: function getText() {\n      return '我是一个节点 rect';\n    }\n  });\n  \n  G6.registerNode('custom', {\n    getText: function getText() {\n      return '我是一个自定义节点，\\n继承于 rect';\n    }\n  }, 'rect');\n  class Demo extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        data: {\n          nodes: [{\n            id: 'node1',\n            x: 50,\n            y: 50,\n            shape: 'rect'\n          }, {\n            id: 'node2',\n            x: 100,\n            y: 200,\n            shape: 'custom'\n          }]\n        }\n      };\n    }\n  \n    render() {\n      return (\n        <div className=\"graph\">\n          <div className=\"graph-basic\">\n            <Graph fitView=\"cc\" height={window.innerHeight} data={this.state.data}></Graph>\n          </div>\n        </div>\n      );\n    }\n  }\n  ReactDOM.render(<Demo />, document.getElementById('mountNode'));\n</script>`\n    },\n    \"graph-animate\": {\n      title: \"图-动画\",\n      code: `<script type=\"text/babel\">\n  const { Graph } = window['g6-for-react'];\n  class Demo extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        fitView: 'cc',\n        height: window.innerHeight,\n        animate: true,\n        data: {\n          nodes: [{\n            id: 'node1',\n            x: 100,\n            y: 200,\n            label: '节点1'\n          }]\n        }\n      };\n    }\n  \n    render() {\n      return (\n        <div className=\"graph\">\n          <div className=\"graph-basic\">\n            <Graph fitView=\"cc\" animate={true} height={window.innerHeight} data={this.state.data} onGetG6Instance={graph => this.graph = graph}></Graph>\n          </div>\n        </div>\n      );\n    }\n  \n    componentDidMount() {\n      setTimeout(() => {\n        this.graph.update('node1', {\n          x: 50,\n          y: 50\n        });\n      }, 800);\n      setTimeout(() => {\n        this.setState({ data: { nodes: [{\n          id: 'node1',\n          x: 200,\n          y: 50,\n          label: '节点1'\n        }] } });\n      }, 1400);\n      setTimeout(() => {\n        this.setState({ data: { nodes: [] } });\n      }, 2000);\n    }\n  }\n  ReactDOM.render(<Demo />, document.getElementById('mountNode'));\n</script>`\n    },\n    \"default-node\": {\n      title: \"默认-边\",\n      code: `<script type=\"text/babel\">\n  const { Graph } = window['g6-for-react'];\n  class Demo extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        data: {\n          nodes: [{\n            id: 'node1',\n            x: 100,\n            y: 200,\n            size: 40,\n            label: '节点1'\n          }, {\n            id: 'node2',\n            x: 300,\n            y: 200,\n            color: '#eb2f96',\n            label: '节点2'\n          }],\n          edges: [{\n            id: 'edge1',\n            target: 'node2',\n            source: 'node1'\n          }]\n        }\n      };\n    }\n  \n    render() {\n      return (\n        <div className=\"graph\">\n          <div className=\"graph-basic\">\n            <Graph fitView=\"cc\" animate={true} height={window.innerHeight} data={this.state.data}></Graph>\n          </div>\n        </div>\n      );\n    }\n  }\n  ReactDOM.render(<Demo />, document.getElementById('mountNode'));\n</script>`\n    },\n    \"default-edge\": {\n      title: '默认-边',\n      code: `<script type=\"text/babel\">\n  const { Graph } = window['g6-for-react'];\n  class Demo extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        data: {\n          nodes: [{\n            id: 'node1',\n            x: 100,\n            y: 200\n          }, {\n            id: 'node2',\n            x: 300,\n            y: 200\n          }],\n          edges: [{\n            source: 'node1',\n            target: 'node2',\n            label: '普通边'\n          }, {\n            source: 'node1',\n            target: {\n              x: 100,\n              y: 50\n            },\n            label: '单向悬空边'\n          }, {\n            source: {\n              x: 150,\n              y: 50\n            },\n            target: {\n              x: 150,\n              y: 100\n            },\n            label: '双向悬空边'\n          }, {\n            source: 'node1',\n            target: {\n              x: 100,\n              y: 280\n            },\n            style: {\n              endArrow: true\n            },\n            label: '箭头'\n          }, {\n            source: 'node1',\n            target: {\n              x: 10,\n              y: 200\n            },\n            sizesize: 4,\n            label: '粗细'\n          }, {\n            source: 'node2',\n            target: {\n              x: 400,\n              y: 200\n            },\n            color: 'red',\n            label: '颜色'\n          }]\n        }\n      };\n    }\n  \n    render() {\n      return (\n        <div className=\"graph\">\n          <div className=\"graph-basic\">\n            <Graph fitView=\"cc\" animate={true} height={window.innerHeight} data={this.state.data}></Graph>\n          </div>\n        </div>\n      );\n    }\n  }\n  ReactDOM.render(<Demo />, document.getElementById('mountNode'));\n</script>`\n    },\n    \"default-group\": {\n      title: '默认-分组',\n      code: `<script type=\"text/babel\">\n  const { Graph } = window['g6-for-react'];\n  class Demo extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        data: {\n          nodes: [{\n            id: 'node1',\n            x: 100,\n            y: 200,\n            label: '节点1',\n            parent: 'group1'\n          }, {\n            id: 'node2',\n            x: 300,\n            y: 200,\n            label: '节点2',\n            parent: 'group1'\n          }, {\n            id: 'node3',\n            x: 100,\n            y: 300,\n            label: '节点3',\n            parent: 'group2'\n          }, {\n            id: 'node4',\n            x: 300,\n            y: 300,\n            label: '节点4',\n            parent: 'group2'\n          }],\n          edges: [{\n            id: 'edge1',\n            target: 'node2',\n            source: 'node1'\n          }],\n          groups: [{\n            id: 'group1',\n            label: '展开群组'\n          }, {\n            id: 'group2',\n            label: '折叠群组',\n            collapsed: true\n          }]\n        }\n      };\n    }\n  \n    render() {\n      return (\n        <div className=\"graph\">\n          <div className=\"graph-basic\">\n            <Graph fitView=\"cc\" animate={true} height={window.innerHeight} data={this.state.data}></Graph>\n          </div>\n        </div>\n      );\n    }\n  }\n  ReactDOM.render(<Demo />, document.getElementById('mountNode'));\n</script>`\n    },\n    \"graph-change-size\": {\n      title: '图-更改画布尺寸',\n      code: `<script type=\"text/babel\">\n  const { Graph } = window['g6-for-react'];\n  class Demo extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        data: {\n          nodes: [{\n            id: 'node1',\n            x: 100,\n            y: 200,\n            size: 40,\n            label: '节点1'\n          }, {\n            id: 'node2',\n            x: 300,\n            y: 200,\n            color: '#eb2f96',\n            label: '节点2'\n          }],\n          edges: [{\n            id: 'edge1',\n            target: 'node2',\n            source: 'node1'\n          }]\n        },\n        width: window.innerWidth,\n        height: window.innerHeight\n      };\n    }\n  \n    render() {\n      return (\n        <div className=\"graph\">\n          <div className=\"graph-basic\">\n            <div>\n              <button onClick={() => this.setState({ width: 250, height: 250 })}>250 * 250</button>\n              <button onClick={() => this.setState({ width: 350, height: 350 })}>350 * 350</button>\n              <button onClick={() => this.setState({ width: 400, height: 400 })}>400 * 400</button>\n            </div>\n            <Graph forceFit={true} css={{ border: '1px solid red' }} fitView=\"cc\" animate={true} width={this.state.width} height={this.state.height} data={this.state.data}></Graph>\n          </div>\n        </div>\n      );\n    }\n  }\n  ReactDOM.render(<Demo />, document.getElementById('mountNode'));\n</script>`\n    },\n    \"graph-zIndex\": {\n      title: '图-调整图层',\n      code: `<script type=\"text/babel\">\n  const { Graph, NodeMapper } = window['g6-for-react'];\n  const nodes = [];\n  const width = window.innerWidth;\n  const height = window.innerHeight;\n  const num = 500;\n  for (let index = 0; index < num; index++) {\n    nodes.push({\n      x: width * Math.random(),\n      y: height * Math.random()\n    });\n  }\n  class Demo extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        data: {\n          nodes\n        }\n      };\n    }\n  \n    onNodeMouseenter = e => {\n      const item = e.item;\n      this.graph.toFront(item);\n      this.graph.update(item, {\n        style: {\n          fill: 'red'\n        }\n      });\n    };\n  \n    onNodeMouseleave = e => {\n      const item = e.item;\n      this.graph.toBack(item);\n      this.graph.update(item, {\n        style: {\n          fill: '#1890FF'\n        }\n      });\n    };\n  \n    render() {\n      return (\n        <div className=\"graph\">\n          <div className=\"graph-basic\">\n            <Graph \n              width={width} \n              height={height} \n              data={this.state.data} \n              onGetG6Instance={graph => this.graph = graph}\n              onNodeMouseenter={this.onNodeMouseenter}\n              onNodeMouseleave={this.onNodeMouseleave}\n            >\n              <NodeMapper style={{ fillOpacity: 0.8 }}/>\n            </Graph>\n          </div>\n        </div>\n      );\n    }\n  }\n  ReactDOM.render(<Demo />, document.getElementById('mountNode'));\n</script>`\n    },\n  }\n}"],"mappingssourceRoot":""}